import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

public class FeatureKeyHasher {

    public static class FeatureKeyResult {
        public final String sha256Hash;
        public final String featureKey;
        public final int modValue;

        public FeatureKeyResult(String sha256Hash, String featureKey, int modValue) {
            this.sha256Hash = sha256Hash;
            this.featureKey = featureKey;
            this.modValue = modValue;
        }
    }

    public static FeatureKeyResult computeFeatureKey(String modfeatureId, List<Object> featureEntries, String delimiter, int N) {
        // Join values with null-handling
        StringBuilder featureKeyBuilder = new StringBuilder();
        for (int i = 0; i < featureEntries.size(); i++) {
            Object entry = featureEntries.get(i);
            featureKeyBuilder.append(entry != null ? entry.toString() : "null");
            if (i < featureEntries.size() - 1) {
                featureKeyBuilder.append(delimiter);
            }
        }
        String featureKey = featureKeyBuilder.toString();

        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(featureKey.getBytes(StandardCharsets.UTF_8));

            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                hexString.append(String.format("%02x", b));
            }
            String sha256Hash = hexString.toString();

            // Convert hash to integer mod N
            int modValue = new java.math.BigInteger(sha256Hash, 16).mod(java.math.BigInteger.valueOf(N)).intValue();

            return new FeatureKeyResult(sha256Hash, featureKey, modValue);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("SHA-256 algorithm not available", e);
        }
    }

    // Example usage
    public static void main(String[] args) {
        List<Object> entries = List.of("val1", null, "val3");
        FeatureKeyResult result = computeFeatureKey("some_id", entries, "\u0000", 16);
        System.out.println("Hash: " + result.sha256Hash);
        System.out.println("Key: " + result.featureKey);
        System.out.println("Mod Value: " + result.modValue);
    }
}
