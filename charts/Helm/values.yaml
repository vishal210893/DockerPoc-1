# -----------------------------------------------------------------------------
# Global
# -----------------------------------------------------------------------------
global:
  imageRegistry: ""                 # Prefix for all images (e.g., gcr.io/acme)
  imagePullSecrets: []              # List of imagePullSecrets names

# -----------------------------------------------------------------------------
# Deployment
# -----------------------------------------------------------------------------
deployment:
  replicas: 1
  componentLabel: "backend"              # app.kubernetes.io/component
  annotations: {}

  container:
    name: "app"
    image: "vishal210893/dockerpoc-1"
    tag: "20250723-154116"
    imagePullPolicy: "IfNotPresent"
    ports:
      http: 8005
      debug: 5005
    envFromSecretKey:
      secretName: "env-secret"
      key: "SECRET-VALUE"
    resources:
      requests:
        memory: "1Gi"
        cpu: "1"
      limits:
        memory: "2Gi"
        cpu: "3"

# -----------------------------------------------------------------------------
# Service Account
# -----------------------------------------------------------------------------
serviceAccount:
  create: false
  name: ""                           # Set to reuse existing SA
  annotations: {}
  automount: true

# -----------------------------------------------------------------------------
# Pod/Container security & metadata
# -----------------------------------------------------------------------------
podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: [ "ALL" ]
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

priorityClassName: ""
terminationGracePeriodSeconds: 30

dnsPolicy: ClusterFirst
dnsConfig: {}
enableServiceLinks: true

nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []

# -----------------------------------------------------------------------------
# Networking
# -----------------------------------------------------------------------------
service:
  type: ClusterIP
  port: 8080
  targetPort: http
  annotations: {}
  labels: {}
  # nodePort: 30080                    # Only if type: NodePort
  # loadBalancerIP: ""                 # If type: LoadBalancer
  # loadBalancerSourceRanges: []
  # sessionAffinity: None
  # sessionAffinityConfig: {}

containerPorts:
  http: 8080
  debug: 5005

ingress:
  enabled: true
  name: "dockerpoc-1"
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
  hosts: []    # we're using hostless rules
  rules:
    - paths:
        - path: /ingress/(.*)
          pathType: ImplementationSpecific
          backend:
            service:
              name: dockerpoc-1
              port:
                name: http
        - path: /cloud/(.*)
          pathType: ImplementationSpecific
          backend:
            service:
              name: cloudtest
              port:
                number: 9015

networkPolicy:
  enabled: false
  ingress: []
  egress: []

# -----------------------------------------------------------------------------
# Probes
# -----------------------------------------------------------------------------
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# -----------------------------------------------------------------------------
# Resources
# -----------------------------------------------------------------------------
resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# -----------------------------------------------------------------------------
# Env & Secrets
# -----------------------------------------------------------------------------
env:
  - name: APP_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "info"

envFromSecret:
  enabled: true
  secretName: "dockerpoc-app-secret"

secret:
  create: true
  name: "env-secret"
  type: "Opaque"          # k8s uses Opaque; 'generic' is kubectl CLI flag
  stringData:
    SECRET-VALUE: "K8s secret"

# -----------------------------------------------------------------------------
# Persistence
# -----------------------------------------------------------------------------
persistence:
  enabled: true
  volumeName: "filestorage"
  mountPath: "/opt/file"
  accessModes: ["ReadWriteMany"]
  size: 1Gi
  storageClass: "dockerpoc-sc"

  pvc:
    name: "file-pvc"

  pv:
    enabled: true               # turn off in prod if using dynamic provisioning
    name: "pv-volume"
    storageClassName: "dockerpoc-sc"
    size: 1Gi
    accessModes: ["ReadWriteMany"]
    reclaimPolicy: Retain
    hostPath:
      enabled: true
      path: /Users/viskumar/mountpath

storageClass:
  create: true
  name: "dockerpoc-sc"
  provisioner: "k8s.io/minikube-hostpath"
  parameters:
    type: pd-ssd


# -----------------------------------------------------------------------------
# Autoscaling / Disruption
# -----------------------------------------------------------------------------
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# -----------------------------------------------------------------------------
# Extras
# -----------------------------------------------------------------------------
extraVolumes: []
extraVolumeMounts: []
extraContainers: []
initContainers: []
