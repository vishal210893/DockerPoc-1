name: Build and Deploy

on:
  push:
    branches:
      - learning/github-action

# Global environment
env:
  USER: vishal210893
  REPO_NAME: dockerpoc-1

jobs:
  build-artifact:
    name: 1Ô∏è‚É£ Build Java Artifact
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1.1 Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 1.2 Set up Java 17
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 1.3 Cache local Maven repo
      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 1.4 Build with Maven
      - name: Maven build
        run: mvn -q install

      # 1.5 Upload JAR artifact
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/dockerpoc-1.jar

  docker-build-push:
    name: 2Ô∏è‚É£ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-artifact
    defaults:
      run:
        shell: bash

    # Expose only the timestamp tag (avoid secret redaction)
    outputs:
      image_tag: ${{ steps.tag.outputs.IMAGE_TAG }}

    env:
      DOWNLOAD_IMAGE: false

    steps:
      # 2.1 Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2.2 Download the JAR artifact
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      # 2.3 Generate timestamp tag
      - name: Generate image tag
        id: tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d-%H%M%S)
          echo "IMAGE_TAG=$IMAGE_TAG"                                             >> $GITHUB_OUTPUT

          # Set for subsequent steps in this job
          echo "DOCKER_IMAGE=${{ env.USER }}/${{ env.REPO_NAME }}:${IMAGE_TAG}"   >> $GITHUB_ENV
          echo "GHCR_IMAGE=${{ env.REPO_NAME }}:${IMAGE_TAG}"                     >> $GITHUB_ENV

      # 2.4 Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 2.5 Log in to GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PASSWORD }}

      # 2.6 Set up QEMU for multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 2.7 Set up Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      # 2.8 Build & push Docker images
      - name: Build & push image
        uses: docker/build-push-action@v5
        continue-on-error: true
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}
            ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_IMAGE }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}-buildcache
          cache-to:   type=registry,ref=${{ env.DOCKER_IMAGE }}-buildcache,mode=max

      # 2.9 (Optional) Save image to tar
      - name: Save image tar
        if: env.DOWNLOAD_IMAGE == 'true'
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}
          docker save ${{ env.DOCKER_IMAGE }} -o docker-image.tar

      # 2.10 (Optional) Upload image tar
      - name: Upload image artifact
        if: env.DOWNLOAD_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar

  update-deployment:
    name: 3Ô∏è‚É£ Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: docker-build-push
    defaults:
      run:
        shell: bash

    # Reassemble full image name from non-secret bits
    env:
      IMAGE_TAG: ${{ needs.docker-build-push.outputs.image_tag }}

    steps:
      # 3.1 Debug job outputs
      - name: Debug job outputs
        run: |
          echo "All outputs from docker-build-push:"
          echo "${{ toJSON(needs.docker-build-push.outputs) }}"
          echo "‚Üí IMAGE_TAG:    $IMAGE_TAG"

      # 3.2 Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 3.3: Set Docker image environment variable
      - name: Set Docker image
        run: |
          echo "DOCKER_IMAGE=${USER}/${REPO_NAME}:${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Using image: ${DOCKER_IMAGE}"      

      # 3.4 Update Deployment YAML
      - name: Patch Deployment image
        run: |
          sed -i -e "s|image:.*|image: ${DOCKER_IMAGE}|g" K8s_Yaml/App/Deployment.yaml
          cat   K8s_Yaml/App/Deployment.yaml

      # 3.5 Verify image update
      - name: Verify Deployment image update
        run: |
          IMAGE_LINE=$(grep 'image:' K8s_Yaml/App/Deployment.yaml | head -1 | awk '{print $2}')
          if [[ -z "$IMAGE_LINE" ]]; then
            echo "ERROR: Image value is empty!"
            exit 1
          fi
          if [[ "$IMAGE_LINE" != "${DOCKER_IMAGE}" ]]; then
            echo "ERROR: Image value did not update correctly!"
            echo "Expected: ${DOCKER_IMAGE}, Found: $IMAGE_LINE"
            exit 1
          fi
          echo "Image value updated successfully: $IMAGE_LINE"

      # 3.6 Commit & push changes
      - name: Commit and push
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add K8s_Yaml/App/Deployment.yaml
          git commit -m "chore: update deployment image ‚Üí ${DOCKER_IMAGE}"
          git push origin ${{ github.ref_name }}



  report:
    name: üìù Report
    needs: [ build-artifact,docker-build-push,update-deployment ]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ toJSON(github) }}"
