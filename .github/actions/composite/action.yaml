name: 'System & Git Repository Info'
description: 'Prints detailed information about the runner OS, Git repository, and optionally Java environment and directory structure. Outputs a formatted timestamp.'
author: 'Your Name/Org'

inputs:
  show_extended_info:
    description: 'Set to true to display Java information and directory tree.'
    required: false
    default: 'false'

outputs:
  formatted_run_timestamp:
    description: 'The formatted timestamp generated by this action.'
    value: ${{ steps.generate_timestamp.outputs.timestamp_output }} # Reference the output of the new step

runs:
  using: "composite"
  steps:
    - name: Generate Timestamp # New step to generate the timestamp
      id: generate_timestamp # ID to reference its outputs
      shell: bash
      run: |
        echo "timestamp_output=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

    - name: Display Operating System Information
      shell: bash
      run: |
        echo ""
        echo "::group::🖥️ Operating System Details"
        echo "========================================"
        echo "  KERNEL INFO:    $(uname -a)"
        echo "  ARCHITECTURE:   $(uname -m)"
        echo "  RUNNER OS:      $RUNNER_OS"
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          if command -v lsb_release &> /dev/null; then
            echo "  DISTRO (lsb_release):"
            lsb_release -a 2>/dev/null | sed 's/^/    ▶ /' || echo "    ▶ N/A"
          elif [ -f /etc/os-release ]; then
            echo "  DISTRO (/etc/os-release):"
            cat /etc/os-release | sed 's/^/    ▶ /' || echo "    ▶ N/A"
          else
            echo "  DISTRO INFO:    N/A (lsb_release & /etc/os-release not found)"
          fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          echo "  MACOS VERSION:"
          sw_vers | sed 's/^/    ▶ /'
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "  WINDOWS DETAILS:"
          powershell -Command "Get-ComputerInfo | Select-Object OsName, OsVersion, OsArchitecture, CsManufacturer, CsModel | Format-List" | sed 's/^/    ▶ /'
        fi
        echo "========================================"
        echo "::endgroup::"
        echo ""

    - name: Configure Git Safe Directory and Display Repository Information
      shell: bash
      run: |
        # Add the current workspace directory to Git's safe directories
        # GITHUB_WORKSPACE is the root directory of the checkout
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        echo "✅ Added $GITHUB_WORKSPACE to git safe.directory"
        echo ""

        echo "::group::🌳 Git Repository Details"
        echo "========================================"
        echo "  REPOSITORY:       ${GITHUB_REPOSITORY}"
        echo "  BRANCH:           ${GITHUB_REF_NAME:-$(git rev-parse --abbrev-ref HEAD)}"
        echo "  COMMIT SHA:       ${GITHUB_SHA:-$(git rev-parse HEAD)}"
        echo "  SHORT SHA:        $(echo ${GITHUB_SHA:-$(git rev-parse HEAD)} | cut -c1-7)"
        echo "  AUTHOR:           $(git log -1 --pretty=format:'%an <%ae>')"
        echo "  COMMIT DATE:      $(git log -1 --pretty=format:'%ad' --date='format:%Y-%m-%d %H:%M:%S %Z')"
        echo "  REMOTE URL:       $(git remote get-url origin 2>/dev/null || echo 'N/A')"
        TAGS_AT_HEAD=$(git tag --points-at HEAD | tr '\n' ',' | sed 's/,$//')
        echo "  TAGS AT HEAD:     ${TAGS_AT_HEAD:-N/A}"
        echo ""
        echo "  COMMIT MESSAGE:"
        git log -1 --pretty=%B | sed 's/^/    /'
        echo "========================================"
        echo "::endgroup::"
        echo ""

    - name: Display Java and Directory Information (if enabled)
      if: inputs.show_extended_info == 'true' # Condition to run this step
      shell: bash
      run: |
        echo ""
        echo "::group::☕ Java Environment & 📁 Directory Structure"
        echo "======================================================"
        echo "  JAVA DETAILS:"
        if command -v java &> /dev/null; then
          echo "    ▶ Version:"
          java -version 2>&1 | sed 's/^/      --> /'
          echo "    ▶ JAVA_HOME:    ${JAVA_HOME:-N/A (Not explicitly set or found)}"
        else
          echo "    ▶ Java not found in PATH."
        fi
        echo ""
        echo "  DIRECTORY TREE (current workspace):"
        if command -v tree &> /dev/null; then
          tree -L 3 -a -I '.git|.m2|target|node_modules' . | sed 's/^/    /' || echo "    ▶ Tree command failed or directory is empty."
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "    ▶ Using 'cmd /c tree /F /A' for Windows (basic):"
          cmd /c tree /F /A . | sed 's/^/      /' || echo "    ▶ Tree command failed or directory is empty."
        else
          echo "    ▶ 'tree' command not found. Please install it on the runner for a detailed view."
          echo "    ▶ Basic 'ls -R' (first 2 levels):"
          ls -Rla | awk '
            /:$/ {
              if (level < 2) {
                print "    " $0;
                level++;
                next;
              }
              level = 0; # Reset for next top-level dir if needed
              nextfile=1;
            }
            nextfile {
              if ($0 != "." && $0 != "..") print "      " $0;
              nextfile=0;
            }' || echo "    ▶ ls command failed."
        fi
        echo "======================================================"
        echo "::endgroup::"
        echo ""