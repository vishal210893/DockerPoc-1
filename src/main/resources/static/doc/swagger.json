{
  "openapi": "3.0.3",
  "info": {
    "title": "DockerPoc-1 API",
    "description": "API for the DockerPoc-1 microservice, providing version information, file reading, and a sample service endpoint.",
    "version": "1.0.0",
    "contact": {
      "name": "Learning Docker Team",
      "email": "dev@example.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080/ingress/dockerpoc",
      "description": "Kubernetes ingress (prod profile)"
    },
    {
      "url": "http://localhost:8005/dockerpoc",
      "description": "Local development server with context path"
    },
    {
      "url": "/dockerpoc",
      "description": "Relative path for deployed environments with context path"
    }
  ],
  "tags": [
    {
      "name": "Application Info",
      "description": "Endpoints providing application and system information."
    },
    {
      "name": "Utilities",
      "description": "Utility endpoints."
    }
  ],
  "paths": {
    "/api/v1/version": {
      "get": {
        "tags": ["Application Info"],
        "summary": "Get application and system version details",
        "description": "Retrieves detailed information about the microservice, its version, Docker instance, Java version, Spring Boot version, OS details, system resources, and JVM statistics.",
        "operationId": "getVersionInfo",
        "responses": {
          "200": {
            "description": "Successful retrieval of version information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfoResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/readfile": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Read content from a predefined file",
        "description": "Reads content from '/opt/file/fileTest.txt' and appends the hostname.",
        "operationId": "readFileContent",
        "responses": {
          "200": {
            "description": "Successfully read file content.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Content of fileTest.txt-myhostname"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error (e.g., file not found, IO issues).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/service": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get environment information",
        "description": "Returns a string indicating the environment name and hostname.",
        "operationId": "getEnvironmentInfo",
        "responses": {
          "200": {
            "description": "Successfully retrieved environment information.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Environment Name  - DEFAULT - myhostname"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/": {
      "post": {
        "tags": ["Utilities"],
        "summary": "Process Dyc object and return sorted numbers",
        "description": "Accepts a Dyc object, logs it, and returns a list of integers from 100 to 999, sorted in descending order.",
        "operationId": "processDyc",
        "requestBody": {
          "description": "Dyc object to process.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DycRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully processed Dyc object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "example": [999, 998, 997, "...", 100]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid Dyc object format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "VersionInfoResponse": {
        "type": "object",
        "properties": {
          "microservice name": {
            "type": "string",
            "example": "DockerPoc-1"
          },
          "version": {
            "type": "number",
            "format": "double",
            "example": 1.0
          },
          "docker instance": {
            "type": "string",
            "example": "my-docker-hostname"
          },
          "java version": {
            "type": "string",
            "example": "17.0.1"
          },
          "spring boot version": {
            "type": "string",
            "example": "2.3.4.RELEASE"
          },
          "os info": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "NAME": "Ubuntu",
              "VERSION": "20.04.3 LTS (Focal Fossa)",
              "ID": "ubuntu",
              "ID_LIKE": "debian",
              "PRETTY_NAME": "Ubuntu 20.04.3 LTS"
            }
          },
          "system info": {
            "type": "object",
            "properties": {
              "total no. of thread": {
                "type": "integer",
                "format": "int32",
                "example": 8
              },
              "totalphysicalmemorysize": {
                "type": "integer",
                "format": "int64",
                "description": "Total physical memory in MB",
                "example": 16384
              },
              "freephysicalmemorysize": {
                "type": "integer",
                "format": "int64",
                "description": "Free physical memory in MB",
                "example": 8192
              }
            }
          },
          "jvm stats": {
            "type": "object",
            "properties": {
              "max jvm memory": {
                "type": "integer",
                "format": "int64",
                "description": "Maximum JVM memory in MB",
                "example": 2048
              },
              "total jvm memory": {
                "type": "integer",
                "format": "int64",
                "description": "Total allocated JVM memory in MB",
                "example": 512
              },
              "free jvm memory": {
                "type": "integer",
                "format": "int64",
                "description": "Free JVM memory in MB",
                "example": 256
              }
            }
          }
        }
      },
      "DycRequest": {
        "type": "object",
        "description": "Schema for the Dyc object. Adjust properties as per your Dyc.java class.",
        "properties": {
          "message": {
            "type": "string",
            "example": "Hello from Dyc"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "example": 42
          }
        },
        "required": [
          "message"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-27T10:30:00Z"
          },
          "status": {
            "type": "integer",
            "example": 500
          },
          "error": {
            "type": "string",
            "example": "Internal Server Error"
          },
          "message": {
            "type": "string",
            "example": "An unexpected error occurred."
          },
          "path": {
            "type": "string",
            "example": "/dockerpoc/api/v1/version"
          }
        }
      }
    }
  }
}